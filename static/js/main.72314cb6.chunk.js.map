{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["window","CANNON","EngineWithContext","withBabylonJS","Engine","gravityVector","Vector3","sphere","onButtonClicked","physicsImpostor","applyImpulse","Up","scale","getAbsolutePosition","App","sphereRef","useCallback","node","hostInstance","className","antialias","adaptToDeviceRatio","canvasId","enablePhysics","CannonJSPlugin","name","target","alpha","Math","PI","beta","radius","minZ","wheelPrecision","lowerRadiusLimit","upperRadiusLimit","upperBetaLimit","direction","intensity","setDirectionToTarget","Zero","position","shadowMinZ","shadowMaxZ","mapSize","useBlurExponentialShadowMap","blurKernel","shadowCasters","forceBackFacesOnly","depthScale","ref","diameter","segments","type","PhysicsImpostor","SphereImpostor","_options","mass","restitution","size","height","width","createForParentMesh","hasAlpha","thickness","cornerRadius","background","onPointerDownObservable","text","fontFamily","fontStyle","fontSize","color","subdivisions","receiveShadows","BoxImpostor","webVROptions","createDeviceOrientationCamera","enableInteractions","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTASAA,OAAOC,OAASA,EAEhB,IAAMC,EAAoBC,YAAcC,KAClCC,EAAgB,IAAIC,IAAQ,GAAI,KAAM,GACxCC,EAAyB,KAEvBC,EAAkB,WACP,OAAXD,GACFA,EAAOE,gBAAiBC,aACtBJ,IAAQK,KAAKC,MAAM,IAAKL,EAAOM,wBAgEtBC,EA3DO,WAEpB,IAAMC,EAAYC,sBAAY,SAAAC,GAC5BV,EAASU,EAAKC,cACb,IAEH,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6DAGA,kBAACjB,EAAD,CAAmBkB,WAAW,EAAMC,oBAAoB,EAAMC,SAAS,iBACrE,kBAAC,IAAD,CAAOC,cAAe,CAAClB,EAAe,IAAImB,MAExC,qCAAiBC,KAAK,MAAMC,OAAS,IAAIpB,IAAQ,EAAG,EAAG,GACjDqB,OAAQC,KAAKC,GAAK,EAAGC,KAAO,GAAOF,KAAKC,GAAK,EAC7CE,OAAQ,EAAGC,KAAM,KAAOC,eAAgB,GACxCC,iBAAkB,EAAGC,iBAAkB,GAAIC,eAAgBR,KAAKC,GAAK,IAE3E,sCAAkBJ,KAAK,OAAOY,UAAW,IAAI/B,IAAQ,GAAI,EAAG,GAAIgC,UAAW,KAC3E,sCAAkBb,KAAK,eAAec,qBAAsB,CAACjC,IAAQkC,QAASH,UAAW/B,IAAQkC,OAAQC,SAAY,IAAInC,KAAS,GAAI,IAAK,IACzIgC,UAAW,GAAKI,WAAY,EAAGC,WAAY,MAC3C,qCAAiBC,QAAS,KAAMC,6BAA6B,EAAMC,WAAY,GAC7EC,cAAe,CAAC,UAAW,UAAWC,oBAAoB,EAAMC,WAAY,OAGhF,4BAAQC,IAAKnC,EAAWU,KAAK,UAAU0B,SAAU,EAAGC,SAAU,GAAIX,SAAU,IAAInC,IAAQ,EAAG,IAAK,IAC9F,qCAAiB+C,KAAMC,IAAgBC,eAAgBC,SAAU,CAC7DC,KAAM,EACNC,YAAa,MAEjB,2BAAOjC,KAAK,SAASkC,KAAM,EAAGlB,SAAU,IAAInC,IAAQ,EAAG,IAAK,IAC1D,4CAAwBmB,KAAK,gBAAgBmC,OAAQ,KAAMC,MAAO,KAAMC,qBAAqB,EAAMC,UAAU,GAC3G,+BAAWtC,KAAK,SAASmC,OAAQ,GAAKC,MAAO,EAAGG,UAAW,GAAIC,aAAc,IACzE,mCACE,oCAAgBxC,KAAK,aAAayC,WAAW,QAAQC,wBAAyB3D,GAC5E,+BAAW4D,KAAM,kBAAmBC,WAAW,cAAcC,UAAU,OAAOC,SAAU,IAAKC,MAAM,gBAQjH,4BAAQ/C,KAAK,UAAUoC,MAAO,GAAID,OAAQ,GAAIa,aAAc,EAAGC,gBAAgB,GAC7E,qCAAiBrB,KAAMC,IAAgBqB,YAAanB,SAAU,CAC1DC,KAAM,EACNC,YAAa,OAGnB,wCAAoBkB,aAAc,CAAEC,+BAA+B,GAASC,oBAAoB,SC9DxFC,QACW,cAA7B/E,OAAOgF,SAASC,UAEe,UAA7BjF,OAAOgF,SAASC,UAEhBjF,OAAOgF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.72314cb6.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport \"@babylonjs/core/Physics/physicsEngineComponent\"  // side-effect adds scene.enablePhysics function\nimport { Vector3, PhysicsImpostor, Mesh, Nullable } from '@babylonjs/core';\nimport { CannonJSPlugin } from '@babylonjs/core/Physics/Plugins'\nimport { Scene, Engine, withBabylonJS } from 'react-babylonjs';\n\nimport './App.css';\n\nimport * as CANNON from 'cannon';\nwindow.CANNON = CANNON;\n\nconst EngineWithContext = withBabylonJS(Engine);\nconst gravityVector = new Vector3(0, -9.81, 0);\nlet sphere: Nullable<Mesh> = null;\n\nconst onButtonClicked = () => {\n  if (sphere !== null) {\n    sphere.physicsImpostor!.applyImpulse(\n      Vector3.Up().scale(10), sphere.getAbsolutePosition()\n    )\n  }\n}\n\nconst App: React.FC = () => {\n\n  const sphereRef = useCallback(node => {\n    sphere = node.hostInstance;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          @babylonjs + `react-babylonjs`\n        </p>\n        <EngineWithContext antialias={true} adaptToDeviceRatio={true} canvasId=\"sample-canvas\">\n          <Scene enablePhysics={[gravityVector, new CannonJSPlugin()]}>\n            \n            <arcRotateCamera name=\"arc\" target={ new Vector3(0, 1, 0) }\n                  alpha={-Math.PI / 2} beta={(0.5 + (Math.PI / 4))}\n                  radius={4} minZ={0.001} wheelPrecision={50} \n                  lowerRadiusLimit={8} upperRadiusLimit={20} upperBetaLimit={Math.PI / 2}\n                  />\n            <hemisphericLight name='hemi' direction={new Vector3(0, -1, 0)} intensity={0.8} />\n            <directionalLight name=\"shadow-light\" setDirectionToTarget={[Vector3.Zero()]} direction={Vector3.Zero()} position = {new Vector3(-40, 30, -40)}\n              intensity={0.4} shadowMinZ={1} shadowMaxZ={2500}>\n              <shadowGenerator mapSize={1024} useBlurExponentialShadowMap={true} blurKernel={32}\n                shadowCasters={[\"sphere1\", \"dialog\"]} forceBackFacesOnly={true} depthScale={100}\n                />\n            </directionalLight>\n            <sphere ref={sphereRef} name=\"sphere1\" diameter={2} segments={16} position={new Vector3(0, 2.5, 0)}>\n              <physicsImpostor type={PhysicsImpostor.SphereImpostor} _options={{\n                  mass: 1,\n                  restitution: 0.9\n              }} />\n              <plane name=\"dialog\" size={2} position={new Vector3(0, 1.5, 0)}>\n                <advancedDynamicTexture name=\"dialogTexture\" height={1024} width={1024} createForParentMesh={true} hasAlpha={true}>\n                  <rectangle name=\"rect-1\" height={0.5} width={1} thickness={12} cornerRadius={12}>\n                      <rectangle>\n                        <babylon-button name=\"close-icon\" background=\"green\" onPointerDownObservable={onButtonClicked} >\n                          <textBlock text={'\\uf00d click me'} fontFamily=\"FontAwesome\" fontStyle=\"bold\" fontSize={200} color=\"white\" />\n                        </babylon-button>\n                      </rectangle>\n                  </rectangle>\n                </advancedDynamicTexture>\n              </plane>\n            </sphere>\n            \n            <ground name=\"ground1\" width={10} height={10} subdivisions={2} receiveShadows={true}>\n              <physicsImpostor type={PhysicsImpostor.BoxImpostor} _options={{\n                  mass: 0,\n                  restitution: 0.9\n              }} />\n            </ground>\n            <vrExperienceHelper webVROptions={{ createDeviceOrientationCamera: false }} enableInteractions={true} />\n          </Scene>\n        </EngineWithContext>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}